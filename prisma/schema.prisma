// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?   @default("/images/avatar-80.png")
  role          String?   @default("USER")
  address       String?
  phone         String?   @unique
  active        Boolean   @default(false)

  accounts      Account[]
  reservas      Reserva[]
  sessions      Session[]
  notifications Notification[]
  normas        Norma[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String       @id @default(cuid())
  sessionToken String       @unique
  expires      DateTime
  userId       String
  // type         String?   // "YOGA", "PILATES" Aquí usamos el enum definido arriba
  type         SessionType?  // Aquí usamos el enum definido arriba


  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum SessionType {
  Pilates
  Rehabilitacion_funcional
  Entrenamiento_personal
}

model Horario {
  id         String       @id @default(cuid())
  dia        String       // "Lunes", "Martes"
  hora       String       // "10:00"
  tipo       SessionType
  reservas   Reserva[]    // Relación con reservas
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

    @@unique([dia, hora, tipo], name: "dia_hora_tipo")
    // @@unique([dia, hora, tipo], map: "unique_dia_hora_tipo")
}


model Reserva {
  id         String     @id @default(cuid())
  userId     String
  horarioId  String
  fechaReal  DateTime   // Fecha concreta de reserva, por ejemplo: 2025-05-10

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  horario    Horario    @relation(fields: [horarioId], references: [id], onDelete: Cascade)

  createdAt  DateTime   @default(now())
}

model Notification {
  id          String   @id @default(cuid())
  title       String
  message     String
  viewed      Boolean  @default(false)
  createdAt   DateTime @default(now())
  createdBy   String

  creator     User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)
}

model Norma {
  id          String   @id @default(cuid())
  titulo      String
  contenido   String   // Puedes usar Markdown, HTML o texto plano
  publicada   Boolean  @default(true)
  creadaEn    DateTime @default(now())
  actualizada DateTime @updatedAt

  autorId     String?
  autor       User?    @relation(fields: [autorId], references: [id], onDelete: SetNull)
}